// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepoInterface is a mock of UserRepoInterface interface.
type MockUserRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoInterfaceMockRecorder
}

// MockUserRepoInterfaceMockRecorder is the mock recorder for MockUserRepoInterface.
type MockUserRepoInterfaceMockRecorder struct {
	mock *MockUserRepoInterface
}

// NewMockUserRepoInterface creates a new mock instance.
func NewMockUserRepoInterface(ctrl *gomock.Controller) *MockUserRepoInterface {
	mock := &MockUserRepoInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepoInterface) EXPECT() *MockUserRepoInterfaceMockRecorder {
	return m.recorder
}

// GetTagList mocks base method.
func (m *MockUserRepoInterface) GetTagList() ([]*UserTagData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagList")
	ret0, _ := ret[0].([]*UserTagData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagList indicates an expected call of GetTagList.
func (mr *MockUserRepoInterfaceMockRecorder) GetTagList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagList", reflect.TypeOf((*MockUserRepoInterface)(nil).GetTagList))
}

// OpenidList mocks base method.
func (m *MockUserRepoInterface) OpenidList(openid string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenidList", openid)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenidList indicates an expected call of OpenidList.
func (mr *MockUserRepoInterfaceMockRecorder) OpenidList(openid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenidList", reflect.TypeOf((*MockUserRepoInterface)(nil).OpenidList), openid)
}

// UserInfo mocks base method.
func (m *MockUserRepoInterface) UserInfo(openid string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfo", openid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserInfo indicates an expected call of UserInfo.
func (mr *MockUserRepoInterfaceMockRecorder) UserInfo(openid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfo", reflect.TypeOf((*MockUserRepoInterface)(nil).UserInfo), openid)
}
